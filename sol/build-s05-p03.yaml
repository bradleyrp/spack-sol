spack:
  # CUSTOM MODULES
  # these modifications blacklist the system compiler to make Core packages
  # this streamlines the lmod tree that we expose to the users
  # dev: could have sworn you could not set this, but now it is required or else
  #   we have collisions
  view: false
  concretizer: 
    unify: false
    reuse: false
  # CONFIG
  config:
    # pack the install root with the superspec
    install_tree:
      root: /share/Apps/build/ice24v2/marianatrenchbuildsite
    build_stage:
    - $TMPDIR
  # EXTERNAL packages
  packages:
    slurm:
      buildable: false
      externals:
      - spec: slurm@23.02.8 
        prefix: /usr/local/slurm
    hcoll:
      buildable: false
      externals:
      - spec: hcoll@4.8.3230
        prefix: /opt/mellanox/hcoll
    # PINNING packages
    gcc:  
      buildable: false
      externals:
      - spec: gcc@12.4.0%gcc@11.5.0~binutils+bootstrap~graphite~mold~nvptx~piclibs~profiled~strip build_system=autotools build_type=RelWithDebInfo languages='c,c++,fortran' arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-11.5.0/gcc-12.4.0-wf7cn26kms2d4zw2tzn64b3n7rh26dil
    libevent:  
      buildable: false
      externals:
      - spec: libevent@2.1.12%gcc@12.4.0+openssl build_system=autotools arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-12.4.0/libevent-2.1.12-ywd3kagqoltadf6zafvlbjylcs32nwa3
    hwloc:  
      buildable: false
      externals:
      - spec: hwloc@2.11.1%gcc@12.4.0~cairo+cuda~gl~libudev+libxml2~nvml~oneapi-level-zero~opencl+pci~rocm build_system=autotools cuda_arch=75,80,86,89 libs=shared,static arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-12.4.0/hwloc-2.11.1-rdqz3esyjwe5kksm7p4543pburz7qqga
      - spec: hwloc@2.11.1%oneapi@2025.0.0~cairo+cuda~gl~libudev+libxml2~nvml~oneapi-level-zero~opencl+pci~rocm build_system=autotools cuda_arch=75,80,86,89 libs=shared,static arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/oneapi-2025.0.0/hwloc-2.11.1-jf5bic6bo6aobngu2qxintnrhq2w4mfz
    ucx:  
      buildable: false
      externals:
      - spec: ucx@1.18.0%gcc@12.4.0~assertions~backtrace_detail+cma+cuda+dc~debug+dm+examples+gdrcopy~gtest+ib_hw_tm~java+knem~logging+mlx5_dv+openmp+optimizations~parameter_checking+pic+rc+rdmacm~rocm+thread_multiple~ucg+ud+verbs~vfs+xpmem build_system=autotools cuda_arch=75,80,86,89 libs=shared,static opt=3 simd=auto arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-12.4.0/ucx-1.18.0-j3vp2in24loatrct5qetxjywl6xq4fou
    openmpi:  
      buildable: false
      externals:
      - spec: &ompi5-pin openmpi@5.0.5%gcc@12.4.0+atomics+cuda~debug~gpfs~internal-hwloc~internal-libevent~internal-pmix~java~lustre~memchecker+openshmem+romio+rsh~static~two_level_namespace+vt+wrapper-rpath build_system=autotools cuda_arch=75,80,86,89 fabrics=cma,hcoll,knem,ucx,xpmem romio-filesystem=none schedulers=slurm arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-12.4.0/openmpi-5.0.5-6thd6mkhodcoqrpolw35qosoqels7vak
    intel-oneapi-compilers:  
      buildable: false
      externals:
      - spec: intel-oneapi-compilers@2025.0.0%gcc@11.5.0~amd+envmods~nvidia build_system=generic arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-11.5.0/intel-oneapi-compilers-2025.0.0-jnx4zlxhuwxa3ydvxb2odytep3xv5tgu
    intel-oneapi-mpi:
      buildable: false
      externals:
      - spec: &impi21-pin intel-oneapi-mpi@2021.12.1%oneapi@2025.0.0~classic-names+envmods~external-libfabric~generic-names~ilp64 build_system=generic arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/oneapi-2025.0.0/intel-oneapi-mpi-2021.12.1-isy7hnft55f3gglwc52c5dh73prfjmer
    cuda:  
      buildable: false
      externals:
      - spec: &cuda126-gcc cuda@12.6.2%gcc@12.4.0+allow-unsupported-compilers~dev build_system=generic arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-12.4.0/cuda-12.6.2-sfudlff3ul4vfiffwainptavehmjj2h3
      - spec: &cuda126-intel cuda@12.6.2%oneapi@2025.0.0+allow-unsupported-compilers~dev build_system=generic arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/oneapi-2025.0.0/cuda-12.6.2-wddkrvrgvdrrqazscjuc3s43p2yrt4uk
      - spec: &cuda124-intel cuda@12.4.1%oneapi@2025.0.0+allow-unsupported-compilers~dev build_system=generic arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/oneapi-2025.0.0/cuda-12.4.1-hqpy5rmajnax5xmxbojosa7dnbzurvc7
    lmod:
      buildable: false
      externals:
      - spec: lmod@8.7.37%gcc@12.4.0+auto_swap~redirect build_system=autotools arch=linux-almalinux9-icelake
        prefix: /share/Apps/ice24v2/gcc-12.4.0/lmod-8.7.37-nqxnw6firxaifhywq5l7fy34sy7zkqh6
  # MODULES
  modules:
    # configurations for a module set
    default:
      roots:
        lmod: ./lmod
      arch_folder: false
      lmod:
        core_compilers:
        - &gcc_back !system_compiler
        hierarchy:
        - compiler
        - mpi
        exclude:
        - !cat ['%', *gcc_back]
        - lmod
        # r@4.4.1 +X carries a bunch of requirements
        #   that include python@3.11.9 in spite of enormous
        #   effort to centralize around 3.13 so in order to
        #   avoid conflicts, we control this at the module level
        #   and also tag r@4.4.1 back in below
        - python@3.11.9
        - ^python@3.11.9
        # we exclude this because of noisy messages when it reloads, namely:
        #   The following dependent module(s) are not currently loaded: 
        #     <name> (required by: <excessive names, hashes>
        - font-util
        - freetype
        - libpng
        # exclude more basic utilities
        #   dev: we would like to rescue these for the users to compile against,
        #     but this is lower priority than simplifying the module tree
        - bzip2
        - hwloc
        - icu4c
        - libevent
        - libjpeg-turbo
        - libtiff
        - libtirpc
        - libx11
        - libxcb
        - libxmu
        - libxt
        - lz4
        - texinfo
        - which
        - zlib
        - zlib-ng
        include:
        - gcc
        - openmpi
        - intel-oneapi-compilers
        - intel-oneapi-mpi
        # see comments near exclude_implicits 
        #   here we BULK include all python to make sure they can load
        #   without import errors, ModuleNotFound
        - build_system=python_pip ^python@3.13.0
        - build_system=python_pip ^python@3.9.19
        # override the exclusion above
        - r@4.4.1 ^python@3.11.9
        - ^r
        # whenever a modulefile refers to a custom projection
        #   note that we use Core specs to stage the modules before overspack modulefix functions
        core_specs:
        # match these core specs with the projections below
        - ^r
        - build_system=python_pip ^python@3.13.0
        - build_system=python_pip ^python@3.9.19
        # python has some additional packages with build_system=generic
        - py-pip
        - py-wheel
        - py-setuptools
        - py-pybind11
        # spack recommends hiding implicits, which get a hash to avoid collisions, to avoid 
        #   showing too many packages to the user in e.g. module avail, (see the tip at 
        #   https://spack.readthedocs.io/en/latest/module_file_support.html). in the past, we
        #   have used exclude_implicits:false because some of our key user-facing targets, namely
        #   py-matplotlib, would give errors when you import it, claiming that it cannot import PIL,
        #   which comes from py-pillow. the problem is that exclude_implicits:false makes the module
        #   tree explode in size. at some point it was taking trinity, which depends on lots of R 
        #   packages, nearly 5min to load, even with cache. our goal is to exclude implicits and
        #   use the lmod section to restore functionality for packages like py-matplotlib. 
        # previously, we wrote the following note, NOW DEPRECATED, (see above):
        #   it is critical that we avoid excluding implicits or for example py-matplotlib will
        #   not include the PYTHONPATH for a run dependency, py-pillow in the modulefile. for
        #   some reason this was not an issue with R and its dependent packages. note also that
        #   it is extremely tricky to test this. you need a completely new session or else a success
        #   will keep your PYTHONPATH correct between tests! make sure to test in a completely
        #   fresh session. lastly, we had to trim the modulerc files a bit to account for our
        #   module shuffling, or else we got errors when it tried to hide a python with a hash on it
        #   see sol_custom.custom.fix_python_modulerc
        exclude_implicits: true
        # this is critical to ensuring that PYTHONPATH for packages such as py-matplotlib
        #   includes all of the correct modules. this might be a change in spack v0.21 that did
        #   not make its way into the docs, see https://github.com/spack/spack/issues/42535
        # note that ^python:autoload:direct did not fix matplotlib
        #   hence we bulk include all python above
        hide_implicits: true
        hash_length: 0
        projections:
          # gromacs has a cuFFTMp variant
          gromacs +cufftmp: 'gromacs/{version}-cufftmp'
          # gromaacs has a plumed variant
          gromacs +plumed: 'gromacs/{version}-plumed'
          # standard python tree
          build_system=python_pip ^python ^mpi: &py-mpi-pro 'py-{^python.version}-{compiler.name}-{compiler.version}-{^mpi.name}-{^mpi.version}/{name}/{version}'
          build_system=python_pip ^python: &py-pro 'py-{^python.version}-{compiler.name}-{compiler.version}/{name}/{version}' 
          # standard R tree
          ^r ^mpi: 'r-{^r.version}-{compiler.name}-{compiler.version}-{^mpi.name}-{^mpi.version}/{name}/{version}'
          ^r: 'r-{^r.version}-{compiler.name}-{compiler.version}/{name}/{version}'
          py-pip ^python: *py-pro
          py-setuptools ^python: *py-pro
          py-wheel ^python: *py-pro
          py-pybind11 ^python: *py-pro
          # NAMD has a GPU version
          namd +cuda: 'namd-gpu/{version}'
          all: '{name}/{version}'
          # MKL has TBB versions
          intel-oneapi-mkl threads=tbb: 'intel-oneapi-mkl/{version}-tbb'
          intel-oneapi-mkl threads=openmp: 'intel-oneapi-mkl/{version}'
          nccl ^cuda@12.4.1: 'nccl/{version}-cuda-12.4'
        # patching in pmix for openmpi for some reason
        openmpi:
          environment:
            prepend_path:
              LD_LIBRARY_PATH: /share/Apps/ice24v2/gcc-12.4.0/pmix-5.0.3-vznkg3ub32tnrhxslsth5imfgbqo63yq/lib 
        # other module extensions are in spack/etc/templates/lmod.lua
        #   for example the defintions of LOCAL_SCRATCH and CEPHFS_SCRATCH
        all:
          autoload: all
          environment:
            set:
              'LURC_{name}_DIR': '{prefix}'
      # recover the LD_LIBRARY_PATH behavior
      #   this was prompted by sundials
      #   later removed because it caused an error with openssl,
      #   which is an upstream python dependency. hopefully
      #   we can add it back as needed
      prefix_inspections:
        # ./lib64: [LD_LIBRARY_PATH]  
        # ./lib: [LD_LIBRARY_PATH]
        # retain this or some people complain about missing mpi.h
        ./include: [C_INCLUDE_PATH,CPLUS_INCLUDE_PATH]
  # specs in a superspec format, using list of lists
  specs: !flatten
  # MIDDLEWARE 
  # gcc
  - - - !cat
        - &gcc gcc@12.4.0
        - !spec {compiler: *gcc_back}
  # gcc openmpi
  - - - *ompi5-pin          
  # intel
  - - - intel-oneapi-compilers@2025.0.0
  # gcc cuda
  - - - *cuda126-gcc          
  # intel cuda
  - - - *cuda126-intel         
  # intel mpi
  - - - *impi21-pin
  # gcc
  - - !compiled
      compiler: &gcc-prev gcc@12.4.0
      arch: &arch arch=linux-almalinux9-icelake
      specs:
      - &zlib zlib@1.3.1 +optimize+pic+shared build_system=makefile
      - &bzip bzip2@1.0.8 ~debug~pic+shared build_system=generic
      - &git git@2.47.0
      - &tbb intel-oneapi-tbb@2022.0.0
      - &cmake cmake@3.30.5 ~doc +ncurses +ownlibs ~qtgui
      # note that we use a hashpin below
      - libxcb@1.17.0
      - !cat &openblas
        - openblas@0.3.28 
        - ~bignuma ~consistent_fpcsr +fortran ~ilp64 +locking +pic +shared
  # gcc openmpi
  - - !builder
      suffix: !spec {compiler: *gcc}
      tail: &ompi5 !cat
      - openmpi@5.0.5 
      - !spec {compiler: *gcc}
      specs:
      - osu-micro-benchmarks@7.4
  # intel
  - - !compiled
      compiler: &intel oneapi@2025.0.0
      arch: *arch
      specs:
      - *zlib
      - *bzip 
      - *git
      - &tbb-intel intel-oneapi-tbb@2022.0.0
      - &cmake-intel cmake@3.30.5 ~doc +ncurses +ownlibs ~qtgui
      # added miniconda specifically for an amber 24 environment
      - miniconda3@24.7.1
  # intel cuda
  - - - *cuda124-intel
  - - - !cat
        - nccl@2.22.3-1
          cuda_arch=75,80,86,89
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *cuda124-intel}
  # intel intel-mpi
  - - !builder
      suffix: !spec 
        compiler: *intel
      tail: !cat &impi
      - intel-oneapi-mpi@2021.12.1 
      - !spec {compiler: *intel}
      specs:
      - osu-micro-benchmarks@7.4
  # support for tk, python +tkinter
  - - !compiled
      compiler: *gcc
      arch: *arch
      specs:
      - &tcl tcl@8.6.12
      - !cat &tk 
        - tk@8.6.11
        - !spec {depends: *tcl}
  # gcc openmpi middleware
  - - !builder
      suffix: !spec {compiler: *gcc}
      tail: *ompi5-pin
      specs:
      - !cat &hdf5 
        - hdf5@1.14.5 +cxx +fortran +hl +mpi +szip
      - !cat &netcdf-c
        - netcdf-c@4.9.2
        - !spec {depends: *hdf5}
      - !cat
        - &netcdf-cxx netcdf-cxx4@4.3.1
        - !spec {depends: *netcdf-c}
      - &mkl-tbb !cat 
        - &mkl !cat
          - intel-oneapi-mkl@2024.2.2
          - +cluster +envmods ~ilp64 +gfortran +shared threads=tbb mpi_family=openmpi
        - !spec {depends: *tbb}
      - !cat &mkl-omp
        - intel-oneapi-mkl@2024.2.2
        - +cluster +envmods +gfortran ~ilp64 +shared threads=openmp mpi_family=openmpi
      - &netcdf-fortran !cat
        - netcdf-fortran@4.6.1 ~doc +pic +shared
        - !spec {depends: *netcdf-c}
      - &parallel-netcdf parallel-netcdf@1.12.3 ~burstbuffer +cxx +fortran +pic +shared
  # gcc python
  - - - !cat &python
        - &python-base python@3.13.0
        - !spec {compiler: *gcc, arch: *arch}
        - &python-opts-all
          +bz2
          +ctypes
          +dbm
          ~debug
          +libxml2
          +lzma
          ~nis
          +optimizations
          +pic
          +pyexpat
          +pythoncmd
          +readline
          +shared
          +sqlite3
          +ssl
          ~tkinter
          +uuid
          +zlib
  # intel intel-mpi middleware
  - - - !cat &hdf5-intel
        - hdf5@1.14.5 
        - !spec {compiler: *intel, arch: *arch}
        - +cxx +fortran +hl +mpi +szip
        - !spec {depends: *impi}
      - !cat &netcdf-c-intel
        - netcdf-c@4.9.2
        - !spec {depends: *hdf5-intel}
      - !cat &netcdf-cxx 
        - netcdf-cxx4@4.3.1
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *netcdf-c-intel}
      - &mkl-intel !cat 
        - &mkl-base-intel intel-oneapi-mkl@2024.2.2
        - &mkl-variants-intel +cluster +envmods ~ilp64 +shared threads=tbb mpi_family=mpich
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *impi}
        - !spec {depends: *tbb-intel}
      - &netcdf-fortran-intel !cat
        - netcdf-fortran@4.6.1 ~doc +pic +shared
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *netcdf-c-intel}
      - &parallel-netcdf-intel !cat
        - parallel-netcdf@1.12.3 
        - ~burstbuffer +cxx +fortran +pic +shared
      - &fftw-intel !cat
        - fftw@3.3.10
        - !spec {compiler: *intel, arch: *arch}
        - +mpi +openmp +pfft_patches +shared
          precision=float,double
        - !spec {depends: *impi}
  # intel python
  - - !builder
      suffix: !spec
        compiler: *intel
        arch: *arch
      tail: !cat
      - !spec {depends: gdbm, compiler: *intel}
      - !spec {depends: libxcrypt, compiler: *intel}
      - !spec {depends: ncurses, compiler: *intel}
      - !spec {depends: readline, compiler: *intel}
      - !spec {depends: sqlite, compiler: *intel}
      - !spec {depends: util-linux-uuid, compiler: *intel}
      - !spec {depends: xz, compiler: *intel}
      specs:
      - !cat &python-intel 
        # oneapi can only do py-numpy 1 and this requires python 3.9
        - python@3.9.19
        # same as the python-opts-all above minus tkinter
        - +bz2
          +ctypes
          +dbm
          ~debug
          +libxml2
          +lzma
          ~nis
          +optimizations
          +pic
          +pyexpat
          +pythoncmd
          +readline
          +shared
          +sqlite3
          +ssl
          ~tkinter
          +uuid
          +zlib
  # intel python support
  - - !loop_depends
      base: !cat
      - *python-intel
      - !spec
        compiler: *intel
        arch: *arch
      compiler: *intel
      specs:
      # suport for py-cython and hence py-numpy and scipy below is standardized
      #   around a single py-pip, py-wheel, and py-setuptools at maximum version
      #   for Python 3.9 which is the highest we can go with %oneapi
      - &py-setuptools-intel py-setuptools@69.2.0
      - &py-wheel-intel py-wheel@0.41.2
      - &py-pip-intel py-pip@23.1.2
      - !cat 
        - py-packaging@24.1
        - !spec {depends: *py-wheel-intel}
      - !cat &py-cython-intel
        - py-cython@3.0.11
        - !spec {depends: *py-setuptools-intel}
        - !spec {depends: *py-wheel-intel}
        - !spec {depends: *py-pip-intel}
        - !spec {depends: *python-intel}
  # gcc middleware
  - - - &boost !cat
        - boost@1.86.0
          +atomic +charconv +chrono ~clanglibcpp
          ~cobalt +container +context +contract +coroutine +date_time
          ~debug +exception +fiber +filesystem +graph +graph_parallel
          +icu +iostreams +json +locale +log +math +mpi +multithreaded +nowide ~numpy
          ~pic +program_options +python +random +regex +serialization +shared +signals
          ~singlethreaded +stacktrace +system ~taggedlayout +test +thread +timer
          ~type_erasure +url ~versionedlayout +wave 
          build_system=generic cxxstd=11 visibility=hidden
          # note that it took a while to identify that +numpy, which is deprecated anyway
          #   was forcing additional python dependencies
        - !spec {depends: *python}
  # intel middleware
  - - - &boost-intel !cat
        - boost@1.86.0
          +atomic +charconv +chrono ~clanglibcpp
          ~cobalt +container +context +contract +coroutine +date_time
          ~debug +exception +fiber +filesystem +graph +graph_parallel
          +icu +iostreams +json +locale +log +math +mpi +multithreaded +nowide ~numpy
          ~pic +program_options +python +random +regex +serialization +shared +signals
          ~singlethreaded +stacktrace +system ~taggedlayout +test +thread +timer
          ~type_erasure +url ~versionedlayout +wave 
          build_system=generic cxxstd=11 visibility=hidden
          # note that it took a while to identify that +numpy, which is deprecated anyway
          #   was forcing additional python dependencies
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *impi}
        - !spec {depends: *python-intel}
      # building generic cast of characters
      - !cat &metis-intel 
        - metis@5.1.0
        - !spec {compiler: *intel, arch: *arch}
        - ~gdb ~int64 ~ipo ~real64 +shared 
      - !cat &parmetis-intel 
        - parmetis@4.0.3
        - ~gdb ~int64 ~ipo +shared 
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *impi}
        - !spec {depends: *metis-intel}
      - !cat &superlu-dist-intel
        - superlu-dist@9.1.0
          # some +cuda packages around here require you to build on a cuda node
          #   hopefully this is not a problem later. error was atomicAdd
          #   see petsc installation below, where I marked this libcuda.so requirement
        - +cuda cuda_arch=75,80,86,89
        - ~int64 ~ipo ~openmp +parmetis ~rocm +shared
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *metis-intel}
        - !spec {depends: *parmetis-intel}
        - !spec {depends: *impi}
      # LESSON: note multiple build issues with hypre. first, with cublas and cuda 
      #   it says it cannot find cuda.h even though this is clearly correct in the
      #   configure args and we add CUDA_HOME and CUDA_PATH in the env-mods file.
      #   after switching to hashpin, it works, hence the upstream dependencies on
      #   the original, complete superlu-dist superspec above were probably causing
      #   some kind of corruption
      - &hypre-intel !cat
        - hypre@2.32.0
        - ~caliper ~complex ~debug +fortran ~gptune +gpu-aware-mpi ~int64
          ~internal-superlu ~magma ~mixedint +mpi +openmp ~rocblas
          ~rocm +shared +superlu-dist ~sycl ~umpire ~unified-memory
        - +cublas +cuda cuda_arch=75,80,86,89
        - !spec {depends: &superlu-dist-hashpin superlu-dist@9.1.0 /q7pwp5i}
        - !spec {depends: *cuda126-intel}
      # petsc must be build on a node with libcuda.so, see
      #   https://github.com/spack/spack/issues/47163
      #! - !cat &petsc-intel 
      #!   - petsc@3.22.1
      #!   - ~X ~batch ~cgns ~complex ~cuda ~debug +double ~exodusii +fftw +fortran
      #!     ~giflib +hdf5 ~hpddm +hwloc ~hypre ~int64 ~jpeg ~knl ~kokkos ~libpng ~libyaml
      #!     ~memkind +metis ~mkl-pardiso ~mmg ~moab ~mpfr +mpi ~mumps +openmp ~p4est
      #!     ~parmmg ~ptscotch ~random123 ~rocm ~saws ~scalapack +shared ~strumpack
      #!     ~suite-sparse +superlu-dist ~sycl ~tetgen ~trilinos ~valgrind ~zoltan 
      #!   # removed trilinos due to error: 
      #!   #   Unable to generate list of Trilinos Libraries
      #!   # removed +hypre after adding hypre-intel below, error:
      #!   #   error: no member named 'boundtocpu' in 'struct _p_Mat'
      #!   # also removed trilinos from root spec due to problems with kokkos
      #!   - !spec {depends: *impi}
      #!   - !spec {depends: *hdf5-intel}
      #!   - !spec {depends: *fftw-intel}
      #!   - !spec {depends: *metis-intel}
      #!   - !spec {depends: *parmetis-intel}
      #!   - !spec {depends: *superlu-dist-hashpin}
      #!   - !spec {depends: *python-intel}
