spack:
  # CUSTOM MODULES
  # these modifications blacklist the system compiler to make Core packages
  # this streamlines the lmod tree that we expose to the users
  view: false
  concretizer: 
    # DO NOT use reuse or this breaks reproducibility
    #   we also find when_possible triggers major recompiles
    #   despite the fact that this is aimed at HPC centers,
    #   because it also breaks reoproducibility
    unify: false
    reuse: false
  # CONFIG
  config:
    # pack the install root with the superspec
    install_tree:
      root: /share/Apps/build/cascade24v2/marianatrenchbuildsite
    build_stage:
    - $TMPDIR
  # EXTERNAL packages
  packages:
    slurm:
      buildable: false
      externals:
      - spec: slurm@23.02.8 
        prefix: /usr/local/slurm
    hcoll:
      buildable: false
      externals:
      - spec: hcoll@4.8.3230
        prefix: /opt/mellanox/hcoll
    # PINNING packages
    gcc:  
      buildable: false
      externals:
      - spec: gcc@12.4.0%gcc@11.5.0~binutils+bootstrap~graphite~mold~nvptx~piclibs~profiled~strip build_system=autotools build_type=RelWithDebInfo languages='c,c++,fortran' arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-11.5.0/gcc-12.4.0-e6sishzchqw5qmiih2mhsgwfs4adeuou
        extra_attributes:
          compilers:
            c: /share/Apps/cascade24v2/gcc-11.5.0/gcc-12.4.0-e6sishzchqw5qmiih2mhsgwfs4adeuou/bin/gcc
            cxx: /share/Apps/cascade24v2/gcc-11.5.0/gcc-12.4.0-e6sishzchqw5qmiih2mhsgwfs4adeuou/bin/g++
            fortran: /share/Apps/cascade24v2/gcc-11.5.0/gcc-12.4.0-e6sishzchqw5qmiih2mhsgwfs4adeuou/bin/gfortran
    ucx:  
      buildable: false
      externals:
      - spec: ucx@1.18.0%gcc@12.4.0~assertions~backtrace_detail+cma+cuda+dc~debug+dm+examples+gdrcopy~gtest+ib_hw_tm~java+knem~logging+mlx5_dv+openmp+optimizations~parameter_checking+pic+rc+rdmacm~rocm+thread_multiple~ucg+ud+verbs~vfs+xpmem build_system=autotools cuda_arch=75,80,86,89 libs=shared,static opt=3 simd=auto arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/ucx-1.18.0-u3wbksvlws7hq3t3yoy55ybckzgviq4f
    hwloc:  
      buildable: false
      externals:
      - spec: hwloc@2.11.1%gcc@12.4.0~cairo+cuda~gl~libudev+libxml2~nvml~oneapi-level-zero~opencl+pci~rocm build_system=autotools cuda_arch=75,80,86,89 libs=shared,static arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/hwloc-2.11.1-nsaaukf6gshwu5jc2gocbcnfatbxrl2h
    libevent:  
      buildable: false
      externals:
      - spec: libevent@2.1.12%gcc@12.4.0+openssl build_system=autotools arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/libevent-2.1.12-xklogqj6cqrabdlf5uaybb2norpyvsov
    openmpi:  
      buildable: false
      externals:
      - spec: &ompi5-pin openmpi@5.0.5%gcc@12.4.0+atomics+cuda~debug~gpfs~internal-hwloc~internal-libevent~internal-pmix~java~lustre~memchecker+openshmem+romio+rsh~static~two_level_namespace+vt+wrapper-rpath build_system=autotools cuda_arch=75,80,86,89 fabrics=cma,hcoll,knem,ucx,xpmem romio-filesystem=none schedulers=slurm arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/openmpi-5.0.5-yg4ptriwlqg435mvz6lynnoquwn4hity
        extra_attributes:
          environment:
            prepend_path:
              LD_LIBRARY_PATH: /share/Apps/cascade24v2/gcc-12.4.0/pmix-5.0.3-y55kn4qtqvwrbl4risoa7j3ns3xhrtmf/lib
    intel-oneapi-compilers:  
      buildable: false
      externals:
      - spec: intel-oneapi-compilers@2025.0.0%gcc@11.5.0~amd+envmods~nvidia build_system=generic arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-11.5.0/intel-oneapi-compilers-2025.0.0-mnocepxqezubqvtdpnc7z4axd37ahtsv
        extra_attributes:
          compilers:
            c: /share/Apps/cascade24v2/gcc-11.5.0/intel-oneapi-compilers-2025.0.0-mnocepxqezubqvtdpnc7z4axd37ahtsv/compiler/2025.0/bin/icx
            cxx: /share/Apps/cascade24v2/gcc-11.5.0/intel-oneapi-compilers-2025.0.0-mnocepxqezubqvtdpnc7z4axd37ahtsv/compiler/2025.0/bin/icpx
            fortran: /share/Apps/cascade24v2/gcc-11.5.0/intel-oneapi-compilers-2025.0.0-mnocepxqezubqvtdpnc7z4axd37ahtsv/compiler/2025.0/bin/ifx
    intel-oneapi-mpi:  
      buildable: false
      externals:
      - spec: &impi21-pin intel-oneapi-mpi@2021.12.1%oneapi@2025.0.0~classic-names+envmods~external-libfabric~generic-names~ilp64 build_system=generic arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/oneapi-2025.0.0/intel-oneapi-mpi-2021.12.1-ag7dpaxyizidpylgo3hasby6hic2lama
    lmod:  
      buildable: false
      externals:
      - spec: lmod@8.7.37%gcc@12.4.0+auto_swap~redirect build_system=autotools arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/openmpi-5.0.5-5recouusbwrv2pq4gklwas4anpisfvnp
    cuda:  
      buildable: false
      externals:
      - spec: &cuda126-intel cuda@12.6.2%oneapi@2025.0.0~allow-unsupported-compilers~dev build_system=generic arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/oneapi-2025.0.0/cuda-12.6.2-7653ixn465x3mzgtnod2evjins47qekd
      - spec: &cuda126-gcc cuda@12.6.2%gcc@12.4.0+allow-unsupported-compilers~dev build_system=generic arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/cuda-12.6.2-4bnnvhtdkeytxwmiohbirolvkkxh6qpi
      - spec: &cuda124-gcc cuda@12.4.1%gcc@12.4.0+allow-unsupported-compilers~dev build_system=generic arch=linux-almalinux9-cascadelake
        prefix: /share/Apps/cascade24v2/gcc-12.4.0/cuda-12.4.1-x4xosu2vfskros46zmxcoy76ck76q3bf
    # develop was giving errors and I could not pin this to silo
    #   because it depends on libtool in two places so I restrict it here
    libtool:
      require: '@2.4.7'
    # we notice that zlib-ng is foundational and attempt to control it here
    all:  
      providers:
        # we try to target zlib-ng, but one example, trinity ^star has
        #   a conflict with zlib-ng so we change it to depends_on zlib
        zlib-api: [zlib-ng@2.2.1 +compat]
  # MODULES
  modules:
    # configurations for a module set
    default:
      roots:
        lmod: ./lmod
      arch_folder: false
      lmod:
        core_compilers:
        - &gcc_back !system_compiler
        hierarchy:
        - compiler
        - mpi
        exclude:
        - !cat ['%', *gcc_back]
        - lmod
        # r@4.4.1 +X carries a bunch of requirements
        #   that include python@3.11.9 in spite of enormous
        #   effort to centralize around 3.13 so in order to
        #   avoid conflicts, we control this at the module level
        #   and also tag r@4.4.1 back in below
        - python@3.11.9
        - ^python@3.11.9
        # we exclude this because of noisy messages when it reloads, namely:
        #   The following dependent module(s) are not currently loaded: 
        #     <name> (required by: <excessive names, hashes>
        - font-util
        - freetype
        - libpng
        # exclude more basic utilities
        #   dev: we would like to rescue these for the users to compile against,
        #     but this is lower priority than simplifying the module tree
        - bzip2
        - hwloc
        - icu4c
        - libevent
        - libjpeg-turbo
        - libtiff
        - libtirpc
        - libx11
        - libxcb
        - libxmu
        - libxt
        - lz4
        - texinfo
        - which
        - zlib
        - zlib-ng
        include:
        - gcc
        - openmpi
        - intel-oneapi-compilers
        - intel-oneapi-mpi
        # see comments near exclude_implicits 
        #   here we BULK include all python to make sure they can load
        #   without import errors, ModuleNotFound
        - build_system=python_pip ^python@3.13.0
        - build_system=python_pip ^python@3.9.19
        # override the exclusion above
        - r@4.4.1 ^python@3.11.9
        - ^r
        # REVEAL project-specific dependencies
        #! # project: modules that support wym219
        #! - blast-plus@2.16.0
        #! - bowtie@1.3.1
        #! - bowtie2@2.5.2
        #! - bamtools@2.5.2
        #! - salmon@1.10.3
        # whenever a modulefile refers to a custom projection
        #   note that we use Core specs to stage the modules before overspack modulefix functions
        core_specs:
        # match these core specs with the projections below
        - ^r
        - build_system=python_pip ^python@3.13.0
        - build_system=python_pip ^python@3.9.19
        # python has some additional packages with build_system=generic
        - py-pip
        - py-wheel
        - py-setuptools
        - py-pybind11
        # spack recommends hiding implicits, which get a hash to avoid collisions, to avoid 
        #   showing too many packages to the user in e.g. module avail, (see the tip at 
        #   https://spack.readthedocs.io/en/latest/module_file_support.html). in the past, we
        #   have used exclude_implicits:false because some of our key user-facing targets, namely
        #   py-matplotlib, would give errors when you import it, claiming that it cannot import PIL,
        #   which comes from py-pillow. the problem is that exclude_implicits:false makes the module
        #   tree explode in size. at some point it was taking trinity, which depends on lots of R 
        #   packages, nearly 5min to load, even with cache. our goal is to exclude implicits and
        #   use the lmod section to restore functionality for packages like py-matplotlib. 
        # previously, we wrote the following note, NOW DEPRECATED, (see above):
        #   it is critical that we avoid excluding implicits or for example py-matplotlib will
        #   not include the PYTHONPATH for a run dependency, py-pillow in the modulefile. for
        #   some reason this was not an issue with R and its dependent packages. note also that
        #   it is extremely tricky to test this. you need a completely new session or else a success
        #   will keep your PYTHONPATH correct between tests! make sure to test in a completely
        #   fresh session. lastly, we had to trim the modulerc files a bit to account for our
        #   module shuffling, or else we got errors when it tried to hide a python with a hash on it
        #   see sol_custom.custom.fix_python_modulerc
        exclude_implicits: true
        # this is critical to ensuring that PYTHONPATH for packages such as py-matplotlib
        #   includes all of the correct modules. this might be a change in spack v0.21 that did
        #   not make its way into the docs, see https://github.com/spack/spack/issues/42535
        # note that ^python:autoload:direct did not fix matplotlib
        #   hence we bulk include all python above
        hide_implicits: true
        hash_length: 0
        projections:
          # gromacs has a cuFFTMp variant
          gromacs +cufftmp: 'gromacs/{version}-cufftmp'
          # gromaacs has a plumed variant
          gromacs +plumed: 'gromacs/{version}-plumed'
          # standard python tree
          build_system=python_pip ^python ^mpi: &py-mpi-pro 'py-{^python.version}-{compiler.name}-{compiler.version}-{^mpi.name}-{^mpi.version}/{name}/{version}'
          build_system=python_pip ^python: &py-pro 'py-{^python.version}-{compiler.name}-{compiler.version}/{name}/{version}' 
          # standard R tree
          ^r ^mpi: 'r-{^r.version}-{compiler.name}-{compiler.version}-{^mpi.name}-{^mpi.version}/{name}/{version}'
          ^r: 'r-{^r.version}-{compiler.name}-{compiler.version}/{name}/{version}'
          py-pip ^python: *py-pro
          py-setuptools ^python: *py-pro
          py-wheel ^python: *py-pro
          py-pybind11 ^python: *py-pro
          # NAMD has a GPU version
          namd +cuda: 'namd-gpu/{version}'
          all: '{name}/{version}'
          # MKL has TBB versions
          intel-oneapi-mkl threads=tbb: 'intel-oneapi-mkl/{version}-tbb'
          intel-oneapi-mkl threads=openmp: 'intel-oneapi-mkl/{version}'
          nccl ^cuda@12.4.1: 'nccl/{version}-cuda-12.4'
        # patching in pmix for openmpi for some reason
        openmpi:
          environment:
            prepend_path:
              LD_LIBRARY_PATH: /share/Apps/cascade24v2/gcc-12.4.0/pmix-5.0.3-y55kn4qtqvwrbl4risoa7j3ns3xhrtmf/lib 
        # other module extensions are in spack/etc/templates/lmod.lua
        #   for example the defintions of LOCAL_SCRATCH and CEPHFS_SCRATCH
        all:
          autoload: all
          environment:
            set:
              'LURC_{name}_DIR': '{prefix}'
      # recover the LD_LIBRARY_PATH behavior
      #   this was prompted by sundials
      #   later removed because it caused an error with openssl,
      #   which is an upstream python dependency. hopefully
      #   we can add it back as needed
      prefix_inspections:
        # ./lib64: [LD_LIBRARY_PATH]  
        # ./lib: [LD_LIBRARY_PATH]
        # retain this or some people complain about missing mpi.h
        ./include: [C_INCLUDE_PATH,CPLUS_INCLUDE_PATH]
  # specs in a superspec format, using list of lists
  specs: !flatten
  # MIDDLEWARE 
  # gcc
  - - - !cat
        - &gcc gcc@12.4.0
        - !spec {compiler: *gcc_back}
  # gcc openmpi
  - - - *ompi5-pin          
  # intel
  - - - intel-oneapi-compilers@2025.0.0
  # gcc cuda
  - - - *cuda126-gcc          
      - !cat
        - nccl@2.22.3-1
          cuda_arch=75,80,86,89
        - !spec {depends: *cuda126-gcc}
  - - - *cuda124-gcc          
  - - - !cat
        - nccl@2.22.3-1
          cuda_arch=75,80,86,89
        - !spec {depends: *cuda124-gcc}
  # intel cuda
  - - - *cuda126-intel         
  # intel mpi
  - - - *impi21-pin
  # gcc
  - - !compiled
      compiler: &gcc-prev gcc@12.4.0
      arch: &arch arch=linux-almalinux9-cascadelake
      specs:
      - &git git@2.47.0
      - &tbb intel-oneapi-tbb@2022.0.0
      - &cmake cmake@3.30.5 ~doc +ncurses +ownlibs ~qtgui
      - &zlib zlib@1.3.1 +optimize+pic+shared build_system=makefile
      - &zlib-ng zlib-ng@2.2.1 +compat +new_strategies +opt +pic +shared
      - &lz4 lz4@1.10.0 libs=shared,static +pic +ipo
      - &bzip bzip2@1.0.8 ~debug~pic+shared build_system=generic
      # note that this produces a "hashpin" we use below to compile python
      - libxcb@1.17.0
      - !cat &openblas
        - openblas@0.3.28 
        - ~bignuma ~consistent_fpcsr +fortran ~ilp64 +locking +pic +shared
      # anaconda is critical but installation was taking over an hour
      #   so we discard in favor of miniconda: anaconda3@2023.09-0 
      # note that we have modifications to the condarc, see rcnotes/doc/rc-hpc-software.md
      - miniconda3@24.7.1
      # miniforge allows us to avoid breaking the Continuum Inc and Anaconda TOS
      - miniforge3@24.3.0-0 +mamba
  # gcc openmpi
  - - !builder
      suffix: !spec {compiler: *gcc}
      tail: &ompi5 !cat
      - openmpi@5.0.5 
      - !spec {compiler: *gcc}
      specs:
      - osu-micro-benchmarks@7.4
  # intel
  - - !compiled
      compiler: &intel oneapi@2025.0.0
      arch: *arch
      specs:
      - *zlib
      - *zlib-ng
      - *bzip 
      - *git
      - &tbb-intel intel-oneapi-tbb@2022.0.0
      - &cmake-intel cmake@3.30.5 ~doc +ncurses +ownlibs ~qtgui
  # intel intel-mpi
  - - !builder
      suffix: !spec 
        compiler: *intel
      tail: !cat &impi
      - intel-oneapi-mpi@2021.12.1 
      - !spec {compiler: *intel}
      specs:
      - osu-micro-benchmarks@7.4
  # support for tk, python +tkinter
  - - !compiled
      compiler: *gcc
      arch: *arch
      specs:
      - &tcl tcl@8.6.12
      - !cat &tk 
        - tk@8.6.11
        - !spec {depends: *tcl}
  # gcc python
  - - !builder
      suffix: &suffix !spec
        compiler: *gcc
        arch: *arch
      tail: &python-tail !cat
      - !spec {depends: *tk, compiler: *gcc}
      - !spec {depends: libxft, compiler: *gcc}
      - !spec {depends: fontconfig, compiler: *gcc}
      - !spec {depends: freetype, compiler: *gcc}
      - !spec {depends: libpng, compiler: *gcc}
      # PAUSE here to get the libxcb hashpin
      #   see https://github.com/spack/spack/issues/44289
      - !spec {depends: &libxcb-hashpin 'libxcb@1.17.0 /rev5xta'}
      specs:
      # note that this produces a hashpin for python below
      - !cat &python
        - &python-base python@3.13.0
        - &python-opts-all
          +bz2
          +ctypes
          +dbm
          ~debug
          +libxml2
          +lzma
          ~nis
          +optimizations
          +pic
          +pyexpat
          +pythoncmd
          +readline
          +shared
          +sqlite3
          +ssl
          +tkinter
          +uuid
          +zlib
  # gcc openmpi middleware
  - - !builder
      suffix: !spec {compiler: *gcc}
      tail: *ompi5-pin
      specs:
      - !cat &hdf5 
        - hdf5@1.14.5 +cxx +fortran +hl +mpi +szip
      - !cat &netcdf-c
        - netcdf-c@4.9.2
        - !spec {depends: *hdf5}
      - !cat
        - &netcdf-cxx netcdf-cxx4@4.3.1
        - !spec {depends: *netcdf-c}
      - &mkl-tbb !cat 
        - &mkl !cat
          - intel-oneapi-mkl@2024.2.2
          - +cluster +envmods ~ilp64 +gfortran +shared threads=tbb mpi_family=openmpi
        - !spec {depends: *tbb}
      - !cat &mkl-omp
        - intel-oneapi-mkl@2024.2.2
        - +cluster +envmods +gfortran ~ilp64 +shared threads=openmp mpi_family=openmpi
      - &netcdf-fortran !cat
        - netcdf-fortran@4.6.1 ~doc +pic +shared
        - !spec {depends: *netcdf-c}
      - &parallel-netcdf parallel-netcdf@1.12.3 ~burstbuffer +cxx +fortran +pic +shared
      - &fftw !cat
        - fftw@3.3.10
        - +mpi +openmp +pfft_patches +shared
          precision=float,double
  # gcc python py-cython
  - - - &py-cython-hashpin !cat
        - py-cython@3.0.11
        # PAUSE here for the hashpin
        - !spec
          depends: &python-hashpin python@3.13.0 /zk6ycvv
  # gcc python openmpi packages
  - - - !cat &py-numpy
        - &py-numpy-ver py-numpy@2.1.2
        - !spec {depends: *mkl-tbb}
        - !spec {depends: *py-cython-hashpin}
      - !cat &py-scipy
        - &py-scipy-ver py-scipy@1.14.1
        - !spec {depends: *py-numpy}
  # gcc python openmpi packages downstream
  - - - &py-matplotlib !cat
        - py-matplotlib@3.9.2 
        - ~animation ~fonts ~latex ~movies
        - !spec {depends: *py-numpy}
      - &py-mpi4py !cat 
        - py-mpi4py@4.0.1 
        - !spec {depends: *py-cython-hashpin}
        - !spec {depends: *ompi5}
  # support for r +X
  - - !compiled
      compiler: *gcc
      arch: *arch
      specs:
      - &tcl tcl@8.6.12
      - &tk !cat
        - tk@8.6.11
        - +xft +xss
      - &openjdk openjdk@17.0.11_9
      # R dependencies added by +X
      - &harfbuzz !cat
        - harfbuzz@10.0.1
        - +graphite2 ~strip
        - !spec 
          depends: !cat &cairo 
          - cairo@1.16.0 
          - +X +fc +ft +gobject +pdf +pic ~png +shared ~svg
          - !spec 
            depends: &python311 
              python@3.11.9
              +bz2 +crypt +ctypes +dbm ~debug +libxml2 +lzma ~nis
              ~optimizations +pic +pyexpat +pythoncmd +readline +shared +sqlite3 +ssl
              ~tkinter +uuid +zlib 
          - !spec {depends: *libxcb-hashpin}
          - !spec {depends: xcb-proto@1.17.0}
          - !spec {depends: libxext@1.3.6}
          - !spec {depends: libxrender@0.9.11}
          - !spec {depends: renderproto@0.11.1}
          - !spec {depends: pixman@0.44.0 +shared}
      # note that this has a python@3.11 build dependency so we do not pin
      - &icu4c icu4c@74.2
      - &libjpeg libjpeg-turbo@3.0.3
        ~ipo ~jpeg8 ~partial_decoder +pic
      - &libtiff libtiff@4.7.0
        +ccitt ~ipo ~jbig +jpeg ~jpeg12 ~lerc ~libdeflate +logluv ~lzma +lzw +next
        ~old-jpeg ~opengl +packbits ~pic ~pixarlog +shared +thunder ~webp +zlib
        ~zstd
      - &libtirpc libtirpc@1.3.3
      - &libx11 libx11@1.8.10
      - &libxmu libxmu@1.2.1
      - &libxt libxt@1.3.0
      - &pango pango@1.54.0
        +X ~strip
      - &texinfo texinfo@7.1
      - &which which@2.21
  # gcc R
  - - !compiled
      compiler: *gcc
      arch: *arch
      specs:
      - !cat &r
        - &r-ver r@4.4.1
        # added this line afterwards for clarity
        - +X ~memory_profiling ~rmath
        - build_system=autotools
        # constrain cmake to reuse tbb and mkl below
        - !spec {depends: *ompi5}
        - !spec {depends: *openjdk}
        # something triggers a change to mkl
        - !spec {depends: *mkl-tbb}
        - !spec {depends: *tbb}
        - !spec {depends: *harfbuzz}
        # pin to +X support above
        - !spec 
          depends: *cairo
          compiler: *gcc
          arch: *arch
        - !spec {depends: *icu4c}
        - !spec {depends: *libjpeg}
        - !spec {depends: *libtiff}
        - !spec {depends: *libtirpc}
        - !spec {depends: *libx11}
        - !spec {depends: *libxmu}
        - !spec {depends: *libxt}
        - !spec {depends: *pango}
        - !spec {depends: *texinfo}
        - !spec {depends: *tk}
        - !spec {depends: *which}
        # cannot pin to python here because R requires cario
        #   which seems to need a lower python@3.11
  # support for r +X
  - - !loop_depends
      base: *r
      specs:
      - r-dplyr
      - r-ggplot2
      - r-bit
      - r-bit64
      - r-withr
      - r-assertthat
      - r-magrittr
      - r-glue
      - r-rlang
      - r-r6
      - r-tidyselect
      - r-rcpp
      - r-cli
      - r-lifecycle
      - r-vctrs
      - r-purrr
      - r-fs
      - r-lobstr
      - r-cpp11
    # bioconductor
    - !loop_depends
      base: *r
      specs:
      # core items
      - r-biocmanager
      - r-biocinstaller
      # requested
      - r-biostrings
      - r-genomicranges
      # dependents
      # note that we can hide implicits so these might not strictly be necessary
      - r-biostrings
      - r-biocgenerics
      - r-genomeinfodb
      - r-genomeinfodbdata
      - r-rcurl
      - r-bitops
      - r-iranges
      - r-s4vectors
      - r-xvector
      - r-zlibbioc
      - r-genomicranges
      - r-biocgenerics
      - r-genomeinfodb
      - r-genomeinfodbdata
      - r-rcurl
      - r-bitops
      - r-iranges
      - r-s4vectors
      - r-xvector
      - r-zlibbioc
  # dev: starting here we pepper everything with compiler pins
  #   because we keep getting "Spack concretizer internal error."
  #   and this forces us to return to a more manual method,
  #   discarding the loop structures
  # intel intel-mpi middleware
  - - - !cat &hdf5-intel
        - hdf5@1.14.5 
        - !spec {compiler: *intel, arch: *arch}
        - +cxx +fortran +hl +mpi +szip
        - !spec {depends: *impi}
      - !cat &netcdf-c-intel
        - netcdf-c@4.9.2
        - !spec {depends: *hdf5-intel}
      - !cat &netcdf-cxx 
        - netcdf-cxx4@4.3.1
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *netcdf-c-intel}
      - &mkl-intel !cat 
        - &mkl-base-intel intel-oneapi-mkl@2024.2.2
        - &mkl-variants-intel +cluster +envmods ~ilp64 +shared threads=tbb mpi_family=mpich
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *impi}
        - !spec {depends: *tbb-intel}
      - &netcdf-fortran-intel !cat
        - netcdf-fortran@4.6.1 ~doc +pic +shared
        - !spec {compiler: *intel, arch: *arch}
        - !spec {depends: *netcdf-c-intel}
      - &parallel-netcdf-intel !cat
        - parallel-netcdf@1.12.3 
        - ~burstbuffer +cxx +fortran +pic +shared
  # gcc openmpi mkl cuda
  - - - !cat &gromacs23
        - &gmx-base gromacs@2023.3
        - !spec {compiler: *gcc, arch: *arch}
        - &gmx-variants
          ~cp2k
          +cuda
          ~cycle_subcounters
          ~double
          +gmxapi
          +hwloc
          ~intel_provided_gcc
          ~ipo
          ~mdrun_only
          +mpi
          +nblib
          ~nosuffix
          ~opencl
          +openmp
          ~relaxed_double_precision
          +shared build_system=cmake 
          build_type=Release 
          generator=make 
          openmp_max_threads=none
          cuda_arch=75,80,86,89
        # note that gromacs recommends fftw for performance over
        #   MKL and anyway you need this for cuda features
        - !spec {depends: *fftw}
        - !spec {compiler: *gcc, arch: *arch}
        - !spec {depends: *ompi5}
        - !spec {depends: *cuda126-gcc}
  # intel python
  - - !builder
      suffix: !spec
        compiler: *intel
        arch: *arch
      tail: !cat
      - !spec {depends: gdbm, compiler: *intel}
      - !spec {depends: libxcrypt, compiler: *intel}
      - !spec {depends: ncurses, compiler: *intel}
      - !spec {depends: readline, compiler: *intel}
      - !spec {depends: sqlite, compiler: *intel}
      - !spec {depends: util-linux-uuid, compiler: *intel}
      - !spec {depends: xz, compiler: *intel}
      specs:
      - !cat &python-intel 
        # oneapi can only do py-numpy 1 and this requires python 3.9
        - python@3.9.19
        # same as the python-opts-all above minus tkinter
        - +bz2
          +ctypes
          +dbm
          ~debug
          +libxml2
          +lzma
          ~nis
          +optimizations
          +pic
          +pyexpat
          +pythoncmd
          +readline
          +shared
          +sqlite3
          +ssl
          ~tkinter
          +uuid
          +zlib
  # intel python support
  - - !loop_depends
      base: !cat
      - *python-intel
      - !spec
        compiler: *intel
        arch: *arch
      compiler: *intel
      specs:
      # suport for py-cython and hence py-numpy and scipy below is standardized
      #   around a single py-pip, py-wheel, and py-setuptools at maximum version
      #   for Python 3.9 which is the highest we can go with %oneapi
      - &py-setuptools-intel py-setuptools@69.2.0
      - &py-wheel-intel py-wheel@0.41.2
      - &py-pip-intel py-pip@23.1.2
      - !cat 
        - py-packaging@24.1
        - !spec {depends: *py-wheel-intel}
      - !cat &py-cython-intel
        - py-cython@3.0.11
        - !spec {depends: *py-setuptools-intel}
        - !spec {depends: *py-wheel-intel}
        - !spec {depends: *py-pip-intel}
        - !spec {depends: *python-intel}
  # intel python intel-mpi packages 
  - - !builder
      suffix: !spec {compiler: *intel}
      tail: !cat 
      - *python-intel
      - !spec {depends: *impi}
      specs:
      # NOTE: are you using py-numpy in a non-python package? then say so over in
      #   sol-custom/sol_custom/custom.py
      - !cat &py-numpy-intel
        # note that py-numpy version 2 does not work with oneapi, see spack
        - py-numpy@1.26.4
        - !spec {depends: *py-cython-intel}
        - !spec {depends: *mkl-intel}
      # dev: repeated errors after significantly altering available python versions for intel
      #   error is "icx: error: clang frontend command failed with exit code 70 (use -v to see invocation)
      # - !cat &py-scipy-intel
      #   - py-scipy@1.13.1
      #   - !spec {depends: *py-numpy-intel}
  # gcc openmpi
  - - - !cat
        - &lammps-base lammps@20240829.1 
        - &lammps-variant
          build_system=cmake
          build_type=Release 
          fft=fftw3 
          fftw_precision=double 
          generator=make
          lammps_sizes=smallbig
          ~adios ~amoeba +asphere +atc ~awpmd ~bocs +body ~bpm ~brownian +cg-dna
          ~cg-spica +class2 +colloid ~colvars +compress +coreshell ~cuda ~cuda_mps +curl
          ~dielectric ~diffraction +dipole ~dpd-basic ~dpd-meso ~dpd-react ~dpd-smooth
          ~drude ~eff ~electrode ~extra-compute +extra-dump ~extra-fix
          ~extra-molecule +extra-pair ~fep ~ffmpeg +granular +h5md ~heffte ~intel
          ~interlayer ~ipo ~jpeg +kim ~kokkos +kspace ~latboltz ~lepton +lib ~machdyn
          ~manifold +manybody +mc +meam ~mesont ~mgpt +misc ~ml-hdnnp ~ml-iap ~ml-pod
          ~ml-rann ~ml-snap ~ml-uf3 ~mofff +molecule +molfile +mpi +netcdf
          ~opencl +openmp ~openmp-package +opt ~orient +peri +phonon ~plugin
          ~plumed +png +poems ~ptm +python +qeq +qtb +reaction +reaxff ~replica
          ~rheo +rigid ~rocm ~shock ~smtbq ~sph ~spin ~srd ~tally ~tools ~uef ~voronoi
          ~vtk ~yaff
        # customizing support to make this simpler
        - !spec {depends: *py-cython-hashpin}
        - &lammps-support
          ^openblas@0.3.28 ~bignuma ~consistent_fpcsr +fortran ~ilp64 +locking+pic+shared 
          ^fftw@3.3.10 %gcc@12.4.0 +mpi +openmp +pfft_patches +shared 
          ^openmpi@5.0.5%gcc@12.4.0 
  # gcc openmpi mkl cuda
  - - - !cat
        - &gromacs24-base gromacs@2024.3
        - !spec {compiler: *gcc, arch: *arch}
        - &gromacs-2025-variants 
          +cuda cuda_arch=75,80,86,89 
          ~cp2k ~cycle_subcounters ~double +gmxapi +hwloc ~intel_provided_gcc ~ipo
          ~mdrun_only +mpi +nblib ~nosuffix ~opencl +openmp
          ~relaxed_double_precision +shared 
          build_system=cmake 
          build_type=Release
          generator=make
          openmp_max_threads=none
        # note that gromacs recommends fftw for performance over
        #   MKL and anyway you need this for cuda features
        - !spec {depends: *fftw}
        - !spec {compiler: *gcc, arch: *arch}
        - !spec {depends: *ompi5}
        - !spec {depends: *cuda126-gcc}
      - !cat &plumed 
        - plumed@2.9.2
        - !spec {compiler: *gcc, arch: *arch}
        - !spec 
          depends: &py-cython-hashpin-direct py-cython@3.0.11 /7ar33iq
      - !cat 
        - gromacs@2024.2
        - !spec {compiler: *gcc, arch: *arch}
        - *gromacs-2025-variants 
        - +plumed
        - !spec {depends: *fftw}
        - !spec {compiler: *gcc, arch: *arch}
        - !spec {depends: *ompi5}
        - !spec {depends: *cuda126-gcc}
        - !spec {depends: *plumed}
  # gcc openmpi middleware
  # for ada823
  - - - !cat
        - eigen@3.4.0
  - - - !cat &silo
        - silo@4.11.1
          +fortran +fpzip +hdf5 +hzip +mpi +pic ~python +shared ~silex
        # silo +python uses autotools to detect the system python and would
        #   need stronger integration with a python dependency to include
        #   this feature otherwise you see this error:
        #     pysilo.cpp:51:10: fatal error: Python.h: No such file or directory
        #   note that it would definitely need package.py changes to include
        #   this dependency correctly
        - !spec {depends: hdf5@1.14.5 /yqcrqe4}
        - !spec {depends: *ompi5}
  - - - !cat
        - samrai@3.12.0
        - !spec {depends: *silo}
  - - - muparser@2.3.4 
  # for everyone
  - - - &boost !cat
        - boost@1.86.0
          +atomic +charconv +chrono ~clanglibcpp
          ~cobalt +container +context +contract +coroutine +date_time
          ~debug +exception +fiber +filesystem +graph +graph_parallel
          +icu +iostreams +json +locale +log +math +mpi +multithreaded +nowide ~numpy
          ~pic +program_options +python +random +regex +serialization +shared +signals
          ~singlethreaded +stacktrace +system ~taggedlayout +test +thread +timer
          ~type_erasure +url ~versionedlayout +wave 
          build_system=generic cxxstd=11 visibility=hidden
          # note that it took a while to identify that +numpy, which is deprecated anyway
          #   was forcing additional python dependencies
        - !spec {compiler: *gcc, arch: *arch}
        - !spec {depends: *python-hashpin}
      # building generic cast of characters
      - &trilinos !cat
        - trilinos@13.4.1
        - ~adelus ~adios2 +amesos +amesos2 +anasazi +aztec ~basker +belos ~boost ~chaco
          ~complex ~cuda ~cuda_constexpr ~cuda_rdc ~debug ~dtk +epetra +epetraext
          ~epetraextbtf ~epetraextexperimental ~epetraextgraphreorderings
          ~exodus +explicit_template_instantiation ~float +fortran ~gtest ~hdf5
          ~hypre +ifpack +ifpack2 ~intrepid ~intrepid2 ~ipo ~isorropia +kokkos ~mesquite
          ~minitensor +ml +mpi +muelu ~mumps ~nox ~openmp ~pamgen ~panzer ~phalanx ~piro
          ~python ~rocm ~rocm_rdc ~rol ~rythmos +sacado ~scorec ~shards +shared ~shylu
          ~stk ~stokhos ~stratimikos ~strumpack ~suite-sparse ~superlu ~superlu-dist
          ~teko ~tempus ~test ~thyra +tpetra ~trilinoscouplings ~wrapper ~x11 ~zoltan
          ~zoltan2 
      - !cat &metis 
        - metis@5.1.0
        - ~gdb ~int64 ~ipo ~real64 +shared 
      - !cat &parmetis 
        - parmetis@4.0.3
        - ~gdb ~int64 ~ipo +shared 
        - !spec {depends: *metis}
      - !cat &superlu-dist
        - superlu-dist@9.1.0
        # some +cuda packages around here require you to build on a cuda node
        #   hopefully this is not a problem later. error was atomicAdd
        #   see petsc installation below, where I marked this libcuda.so requirement
        - +cuda ~int64 ~ipo ~openmp +parmetis ~rocm +shared
          cuda_arch=75,80,86,89
        - !spec {depends: *metis}
        - !spec {depends: *parmetis}
        - !spec {depends: *ompi5}
      - &hypre !cat
        - hypre@2.32.0
        - ~caliper ~complex +cublas +cuda ~debug +fortran ~gptune +gpu-aware-mpi ~int64
          ~internal-superlu ~magma ~mixedint +mpi +openmp ~rocblas
          ~rocm +shared +superlu-dist ~sycl ~umpire ~unified-memory
          cuda_arch=75,80,86,89
        - !spec {depends: *cuda126-gcc}
        - !spec {depends: *superlu-dist}
      # petsc must be build on a node with libcuda.so, see
      #   https://github.com/spack/spack/issues/47163
      # dev: at some point this has changed and broke
      # - !cat &petsc 
      #   - petsc@3.22.1
      #   - ~X ~batch ~cgns ~complex +cuda ~debug +double ~exodusii +fftw +fortran
      #     ~giflib +hdf5 ~hpddm +hwloc +hypre ~int64 ~jpeg ~knl ~kokkos ~libpng ~libyaml
      #     ~memkind +metis ~mkl-pardiso ~mmg ~moab ~mpfr +mpi ~mumps +openmp ~p4est
      #     ~parmmg ~ptscotch ~random123 ~rocm ~saws ~scalapack +shared ~strumpack
      #     ~suite-sparse +superlu-dist ~sycl ~tetgen ~trilinos ~valgrind ~zoltan 
      #   # removed trilinos due to error: 
      #   #   Unable to generate list of Trilinos Libraries
      #   - !spec {depends: *ompi5}
      #   - !spec {depends: *hdf5}
      #   - !spec {depends: *hypre}
      #   - !spec {depends: *fftw}
      #   - !spec {depends: *metis}
      #   - !spec {depends: *parmetis}
      #   - !spec {depends: *superlu-dist}
      #   - !spec {depends: *python-hashpin}
  # wym219
  # dev: abandoned this after the tree is too slow
  #   note that we solved the problem of multiple python with lmod
  #   but ml trinity took 5min. then we removed lots of extraneous packages
  #   in the middle, for example bzip2, however we had to keep a rule
  #   that says all r-* and py-* packages are available. this gets load times
  #   down to 2min but this is still very very slow. so we abandon and retrench
  #   note that trinity was an EXCELLENT stress test because it motivated these
  #   two tactics that have massively improved hte software tree
  # note that we keep this in place anyway
  #   SEE below for the real wym219 packages
  - - - !cat
        - trinity@2.15.1.FULL
        # note that we use a strategic retreat here. after enormous struggle,
        #   we got trinity to use the same R, so even though it brings its own
        #   boost, and this requires its own separate python and py-numpy,
        #   at least it works. in addition to matching this with our existing R
        #   implicitly (we could not do it with a hashpin), we also removed 
        #   redundancy with intel-oneapi-mkl by carefully reviewing the spack diff
        #   results. the only thing that remained was zlib-ng and this caused 
        #   massive recompiles all due to one package: star. after much
        #   struggle, we changed star from conflicts zlib-ng to depends_on zlib
        #   and this allowed us to concretize. note that I don't fully understand
        #   why concretize doesn't do this for us, or if there are any conseqeunces
        #   to making this switch, but my understanding is that spack keeps the
        #   dependencies isolated enough that it shouldn't matter, and this was
        #   just a small inefficient command from the maintainers of star/package.py 
        - !spec {depends: *r}
        - !spec {depends: *mkl-tbb}
      # # expose useful dependencies
      # # note that we rolled this back in favor of the below
      # - blast-plus@2.16.0 /v2wbwbr
      # - bowtie@1.3.1 /egsuhbt 
      # - bowtie2@2.5.2 /7s57hjl
      # - bamtools@2.5.2 /bf2jnv3
      # - salmon@1.10.3 /p3356xu
  # dar421
  - - - !cat
        - arrow@18.0.0
        - +brotli +bz2 +compute ~cuda ~gandiva +glog ~hdfs +ipc +ipo ~jemalloc +lz4
          ~orc +parquet +python +shared +snappy ~tensorflow +zlib +zstd
        - !spec {depends: *lz4}
        - !spec {depends: *boost}
        - !spec {depends: *py-numpy}
      - !cat
        - duckdb@1.1.2 
        - !spec {depends: *python-hashpin}
  # added for better debugging
  - - - !cat
        - gdb@15.2 +debuginfod ~gold +ld ~lto +python ~quad +source-highlight +tui +xz 
        - !spec {depends: *boost}
  # wym219
  - - - !cat &blast-plus
        - blast-plus
          +bzip2 +freetype +gnutls +jpeg +lzo +openssl 
          +pcre +perl +png ~python ~static +zlib
          # note that blast-plus is not ready for new python and I tried and failed
          #   to pin it against the system python 3.11
      - bowtie2@2.5.2
      - !cat
        - hmmer@3.4 ~gsl +mpi
        - !spec {depends: *ompi5}
      - hyphy@2.5.51hf ~ipo
      - !cat &iq-tree
        - iq-tree@2.3.2
          ~ipo +lsd2 +mpi +openmp
        - !spec {depends: *ompi5}
        - !spec {depends: *boost}
      - mafft@7.525
      - &mcl mcl@14-137 +blast
      - !cat &mmseqs2
        - &mmseqs2-base mmseqs2@15-6f452 ~ipo +mpi +openmp
        - !spec {depends: *ompi5}
      - nextflow@24.10.0
      - paml@4.10.7
      - phylip@3.697
      - !cat
        - raxml@8.2.12+mpi~pthreads
        - !spec {depends: *ompi5}
      - !cat
        - salmon
        - !spec {depends: *boost}
      - !cat
        - r-spades
        - !spec {depends: *r}
      - sratoolkit@3.0.0
      - transdecoder@5.7.1
      - vcftools@0.1.16
      - &fasttree fasttree@2.1.11 +openmp
      # failed to hashpin orthofinder to mmseqs2
      - !cat
        - orthofinder@2.5.5 
          +blast +iqtree +mmseqs2 +muscle +raxml +raxml-ng
        - !spec {depends: *fasttree}
        - !spec {depends: *py-numpy}
        - !spec {depends: *iq-tree}
        - !spec {depends: *blast-plus}
        - !spec {depends: *mcl}
  # amr511, syk321
  - - - !cat
        - stacks@2.53 +sparsehash
        - !spec {compiler: *gcc, arch: *arch}
