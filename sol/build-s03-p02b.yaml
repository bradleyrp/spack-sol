spack:
  # CUSTOM MODULES
  # these modifications blacklist the system compiler to make Core packages
  # this streamlines the lmod tree that we expose to the users
  # dev: could have sworn you could not set this, but now it is required or else
  #   we have collisions
  view: false
  concretizer: 
    # note that things were unified without asking when we ask for two very
    #   similar openmpi packages, but we could probably switch to when_possible
    unify: false
    reuse: false
  modules:
    # configurations for a module set
    default:
      roots:
        lmod: ./lmod
      arch_folder: false
      lmod:
        core_compilers:
        - &gcc_back !system_compiler
        hierarchy:
        - compiler
        - mpi
        exclude:
        - !cat ['%', *gcc_back]
        - lmod
        include:
        - gcc
        - openmpi
        - intel-oneapi-compilers
        - intel-oneapi-mpi
        exclude_implicits: true
        projections:
          all: '{name}/{version}'
          'openmpi fabrics=none': '{name}-intra/{version}'
        hash_length: 0
  config:
    build_stage:
    - $LOCAL_SCRATCH
    - $TMPDIR
  # EXTERNAL packages
  packages:
    slurm:
      buildable: false
      externals:
      - spec: slurm@21.08.8-2 
        prefix: /usr/local/slurm
    hcoll:
      buildable: false
      externals:
      - spec: hcoll@4.8
        prefix: /opt/mellanox/hpcx/hcoll
    # include hpcx so we can ask openmpi/package.py to ingest the modulefile
    #   so that mpirun linking hcoll can find libocomps
    hpcx:
      buildable: false
      externals:
      - spec: hpcx
        prefix: /opt/mellanox/hpcx
    #! ucx: 
    #!   buildable: false
    #!   externals:
    #!   # we defer the specs to the consumer, openmpi below, where we
    #!   #   specify all of the features we think that the rpm provides
    #!   # note that spack does not detect the specs, so you need to
    #!   #   figure these out yourself before pinning against external
    #!   # note that ucx is also in /opt/mellanox/hpcx/ucx but this
    #!   #   causes a weird error (cannot find -liberty)
    #!   - prefix: /usr
    #!     spec: ucx@1.16.0
    # see issue https://github.com/spack/spack/issues/37172
    bison:
      require: "%gcc"
  # specs in a superspec format, using list of lists
  # GCC + MPI
  specs: !flatten
  - - - !cat
        - &gcc gcc@12.1.0
        - !spec {compiler: *gcc_back}
        - &arch arch=linux-centos8-icelake
    # systemwide Lmod
    # dev: note that the systemwide lmod from build-s03-p02.yaml fails here
    # dev: removed xpmem from fabrics because I got errors here when there were
    #   no errors on the original build-s03-p02.yaml and I am fatigued
    # gcc CUDA and ucx for openmpi
    - !compiled
      compiler: !cat [*gcc, *arch]
      specs:
      - &cuda cuda@12.0.1
      - &ucx !cat
        - ucx@1.16.0
        - ~assertions ~backtrace_detail build_system=autotools
          +cma +cuda +dc ~debug +dm +gdrcopy ~gtest +ib_hw_tm
          ~java +knem libs=shared,static
          ~logging +mlx5_dv +openmp opt=3 +optimizations
          ~parameter_checking +pic +rc +rdmacm ~rocm simd=auto
          +thread_multiple ~ucg +ud +verbs ~xpmem
          cuda_arch=89
        - !spec {depends: *cuda}
        - !spec {depends: hwloc +cuda}
    # mpi: openmpi 4
    - - &ompi4 !cat
        - !cat
          - &ompi-base openmpi@4.1.6
          - !spec {compiler: *gcc}
          - &ompi-variants +atomics +cuda ~cxx ~cxx_exceptions ~gpfs 
            ~internal-hwloc ~java +legacylaunchers ~lustre ~memchecker +pmi
            +romio +rsh ~singularity 
            fabrics=cma,hcoll,knem,ucx
            schedulers=slurm
            cuda_arch=89
          - *arch
        # spack does not consider external slurm spec, and pmix for slurm 21 must be 3,
        #   see https://slurm.schedmd.com/mpi_guide.html#open_mpi
        - !spec {depends: pmix@3.2.3}
        - !spec {depends: *ucx}
        - !spec {depends: *cuda}
    # include microbenchmarks with the MPI build-s03-p02.yaml stage for quick testing
    - - !cat
        - osu-micro-benchmarks
        - !spec {depends: *ompi4}
