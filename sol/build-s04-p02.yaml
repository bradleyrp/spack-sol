spack:
  # CUSTOM MODULES
  # these modifications blacklist the system compiler to make Core packages
  # this streamlines the lmod tree that we expose to the users
  # dev: could have sworn you could not set this, but now it is required or else
  #   we have collisions
  view: false
  concretizer: 
    # note that things were unified without asking when we ask for two very
    #   similar openmpi packages, but we could probably switch to when_possible
    unify: false
    reuse: false
  modules:
    # configurations for a module set
    default:
      roots:
        lmod: $SPACK_ENV/lmod
      arch_folder: false
      lmod:
        core_compilers:
        - &gcc_back !system_compiler
        hierarchy:
        - compiler
        - mpi
        exclude:
        - !cat ['%', *gcc_back]
        - lmod
        include:
        - gcc
        - openmpi
        - intel-oneapi-compilers
        - intel-oneapi-mpi
        exclude_implicits: true
        projections:
          all: '{name}/{version}'
          'openmpi fabrics=none': '{name}-intra/{version}'
        hash_length: 0
  config:
    build_stage:
    - $LOCAL_SCRATCH
    - $TMPDIR
  # EXTERNAL packages
  packages:
    slurm:
      buildable: false
      externals:
      - spec: slurm@23.02.8 
        prefix: /usr/local/slurm
  # specs in a superspec format, using list of lists
  # GCC + MPI
  specs: !flatten
  - - - !cat
        - &gcc gcc@12.4.0
        - !spec {compiler: *gcc_back}
        - &arch arch=linux-almalinux9-cascadelake
    # systemwide Lmod
    # note: we got errors on make man_pages until we unset LMOD_PACKAGE_PATH in the
    #   shell where we were running spack install because this was pointing to a 
    #   previous LMOD and it was lacking some master something package. for reference
    #   this took about an hour to solve after manually turning the crank in the
    #   spack stage directory
    - !compiled
      compiler: *gcc
      specs: 
      - !cat
        - lmod@8.7.24 auto_swap=true build_system=autotools  
        - arch=linux-alma9linux-haswell
    # gcc CUDA and ucx for openmpi
    - !compiled
      compiler: !cat [*gcc, *arch]
      specs:
      - &cuda cuda@12.4.0 +allow-unsupported-compilers
      - &ucx !cat
        - ucx@1.16.0
        - ~assertions ~backtrace_detail build_system=autotools
          +cma +cuda +dc ~debug +dm +gdrcopy ~gtest +ib_hw_tm
          ~java +knem libs=shared,static
          ~logging +mlx5_dv +openmp opt=3 +optimizations
          ~parameter_checking +pic +rc +rdmacm ~rocm simd=auto
          +thread_multiple ~ucg +ud +verbs +xpmem
          cuda_arch=75,80,86,89
        - !spec {depends: *cuda}
        - !spec {depends: hwloc +cuda}
    # mpi: openmpi 5
    - - &ompi5 !cat
        - !cat
          - &ompi-base openmpi@5.0.3
          - !spec {compiler: *gcc}
          - &ompi-variants +atomics +cuda ~cxx ~cxx_exceptions ~gpfs 
            ~internal-hwloc ~java +legacylaunchers ~lustre ~memchecker +pmi
            +romio +rsh ~singularity 
            fabrics=cma,hcoll,knem,ucx,xpmem
            schedulers=slurm
            cuda_arch=75,80,86,89
          - *arch
        # spack does not consider external slurm spec, and pmix for slurm 21 must be 3,
        #   see https://slurm.schedmd.com/mpi_guide.html#open_mpi
        - !spec {depends: *ucx}
        - !spec {depends: *cuda}
    # include microbenchmarks with the MPI build-s03-p02.yaml stage for quick testing
    - - !cat
        - osu-micro-benchmarks
        - !spec {depends: *ompi5}
  # INTEL + MPI
  # note that I installed the compilers at one version and oneapi is detected at another
  - - - !cat
        - &intel-compiler intel-oneapi-compilers@2024.1.0
        - *arch
        - !spec {compiler: *gcc_back}
    - - &intel-mpi !cat
        - !cat
          - &intel-mpi-base intel-oneapi-mpi@2021.12.1
          - !spec 
            compiler: &intel oneapi@2024
          - &intel-mpi-variants 
            +envmods ~external-libfabric ~generic-names ~ilp64 
            build_system=generic 
          - *arch
#!     # Intel CUDA 
#!     - !compiled
#!       compiler: !cat [*intel, *arch]
#!       specs:
#!       - *cuda
    # include microbenchmarks with the MPI build-s03-p02.yaml stage for quick testing
    - - !cat
        - osu-micro-benchmarks
        - !spec {depends: *intel-mpi}
